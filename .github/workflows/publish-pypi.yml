name: Build wheel and Publish on Pypi

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g. 0.1.9)"
        required: true
        type: string

jobs:
  build:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: Build wheels
    permissions:
      contents: read
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0   # fetch full history and tags

      - name: Install HDF5 dev libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: |
          python -m build --wheel --outdir dist/

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-3.11
          path: dist/*.whl

  publish:
    name: Publish to PyPI
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Checkout tag if manual run
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch --tags
          git checkout ${{ github.event.inputs.tag }}

      - name: Install HDF5 dev libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev
          
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Verify version matches tag
        run: |
          pip install .
          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_VER=${GITHUB_REF#refs/*/}
          else
            RELEASE_VER=${{ github.event.inputs.tag }}
          fi
          PACKAGE_VER="$(python -c 'import plaid; print(plaid.__version__)')"
          if [ "$RELEASE_VER" != "$PACKAGE_VER" ]; then
            echo "‚ùå Package version ($PACKAGE_VER) doesn't match tag ($RELEASE_VER)"
            exit 1
          fi
          echo "‚úÖ Version check passed: $PACKAGE_VER"
          echo "package_ver=$PACKAGE_VER" >> $GITHUB_OUTPUT

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Check if version already on PyPI
        run: |
          PACKAGE_VER="${{ steps.verify-version.outputs.package_ver }}"
          echo "üîç Checking PyPI for plaid==$PACKAGE_VER"
          if curl --silent --fail "https://pypi.org/pypi/pyplaid/$PACKAGE_VER/json" > /dev/null; then
            echo "‚ùå Version $PACKAGE_VER already exists on PyPI"
            exit 1
          fi
          echo "‚úÖ Version $PACKAGE_VER not found on PyPI, safe to publish."

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
